// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(EVSwappingV2Context))]
    partial class EVSwappingV2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.AuditLog", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KeyValues")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PerformedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("PerformedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AuditId")
                        .HasName("PK__AuditLog__A17F23988DAB68B3");

                    b.HasIndex("PerformedByUserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Models.Battery", b =>
                {
                    b.Property<int>("BatteryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatteryId"));

                    b.Property<int>("BatteryModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<decimal?>("CurrentSoH")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("CycleCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("LastMaintenance")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Available");

                    b.HasKey("BatteryId")
                        .HasName("PK__Batterie__5710805E39AB72DF");

                    b.HasIndex("BatteryModelId");

                    b.HasIndex(new[] { "SerialNumber" }, "UQ__Batterie__048A00086C7A125E")
                        .IsUnique();

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("Domain.Models.BatteryHealthLog", b =>
                {
                    b.Property<long>("BatteryHealthLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BatteryHealthLogId"));

                    b.Property<int>("BatteryId")
                        .HasColumnType("int");

                    b.Property<int?>("CycleCount")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RecordedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<decimal?>("SoH")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("BatteryHealthLogId")
                        .HasName("PK__BatteryH__C86102E2F99AEE46");

                    b.HasIndex("BatteryId");

                    b.ToTable("BatteryHealthLogs");
                });

            modelBuilder.Entity("Domain.Models.BatteryModel", b =>
                {
                    b.Property<int>("BatteryModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatteryModelId"));

                    b.Property<decimal>("CapacityKwh")
                        .HasColumnType("decimal(8, 3)")
                        .HasColumnName("CapacityKWh");

                    b.Property<string>("Chemistry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompatibleVehicleTypes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BatteryModelId")
                        .HasName("PK__BatteryM__831184E1EF9DA614");

                    b.HasIndex(new[] { "ModelCode" }, "UQ__BatteryM__514DC4D4A9ECFCB1")
                        .IsUnique();

                    b.ToTable("BatteryModels");
                });

            modelBuilder.Entity("Domain.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("PreferredPaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TotalSwaps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DriverId")
                        .HasName("PK__Drivers__F1B1CD044D05801A");

                    b.HasIndex(new[] { "UserId" }, "UQ__Drivers__1788CC4D82BCB27F")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Domain.Models.InterStationTransfer", b =>
                {
                    b.Property<long>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransferId"));

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatteryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Requested");

                    b.Property<int>("ToStationId")
                        .HasColumnType("int");

                    b.HasKey("TransferId")
                        .HasName("PK__InterSta__954900917002AFE9");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BatteryId");

                    b.HasIndex("FromStationId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ToStationId");

                    b.ToTable("InterStationTransfers");
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("VND");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Paid");

                    b.Property<long?>("SwapTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionRef")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A38B7824D61");

                    b.HasIndex("SwapTransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.Property<long>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RatingId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<long?>("SwapTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingId")
                        .HasName("PK__Ratings__FCCDF87C7367E509");

                    b.HasIndex("StationId");

                    b.HasIndex("SwapTransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Domain.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("ReservedBatteryModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservedTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__B7EE5F2409167646");

                    b.HasIndex("ReservedBatteryModelId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Models.ReservationAllocation", b =>
                {
                    b.Property<long>("ReservationAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReservationAllocationId"));

                    b.Property<DateTime>("AllocatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BatteryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoldUntil")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReservationAllocationId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("BatteryId", "Status");

                    b.ToTable("ReservationAllocations", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StationId")
                        .HasName("PK__Stations__E0D8A6BD1C2C1478");

                    b.HasIndex(new[] { "Code" }, "UQ__Stations__A25C5AA7BA9935BE")
                        .IsUnique();

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Domain.Models.StationInventory", b =>
                {
                    b.Property<int>("StationInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationInventoryId"));

                    b.Property<int>("BatteryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("SlotNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Available");

                    b.HasKey("StationInventoryId")
                        .HasName("PK__StationI__92D37BC1DE21EA05");

                    b.HasIndex("BatteryId");

                    b.HasIndex("ReservationId");

                    b.HasIndex(new[] { "StationId", "BatteryId" }, "UQ__StationI__15A9AEB95AF9C628")
                        .IsUnique();

                    b.ToTable("StationInventory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.StationStaff", b =>
                {
                    b.Property<int>("StationStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationStaffId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StationStaffId")
                        .HasName("PK__StationS__0F02AC55E210EA79");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "StationId", "UserId" }, "UQ__StationS__31A02A78D13251A8")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StationStaffs");
                });

            modelBuilder.Entity("Domain.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("RemainingSwaps")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__9A2B249D1E0200C9");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Models.SubscriptionPackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("IncludedSwaps")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PackageId")
                        .HasName("PK__Subscrip__322035CCB3B0D72F");

                    b.ToTable("SubscriptionPackages");
                });

            modelBuilder.Entity("Domain.Models.SupportTicket", b =>
                {
                    b.Property<long>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TicketId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Open");

                    b.Property<string>("Subject")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId")
                        .HasName("PK__SupportT__712CC6075DE7689D");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("Domain.Models.SwapTransaction", b =>
                {
                    b.Property<long>("SwapTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SwapTransactionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("CustomerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IncomingBatteryId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OutgoingBatteryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("StaffUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SwapFinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SwapStartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("SwapStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Completed");

                    b.HasKey("SwapTransactionId")
                        .HasName("PK__SwapTran__F6083D6BDCC4B582");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("IncomingBatteryId");

                    b.HasIndex("OutgoingBatteryId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("StaffUserId");

                    b.HasIndex("StationId");

                    b.ToTable("SwapTransactions");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int?>("BatteryModelPreferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Make")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VIN");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId")
                        .HasName("PK__Vehicles__476B5492A1D3C6E1");

                    b.HasIndex("BatteryModelPreferenceId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Vin" }, "UQ__Vehicles__C5DF234C35BD0AC7")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AuditLog", b =>
                {
                    b.HasOne("Domain.Models.User", "PerformedByUser")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PerformedByUserId")
                        .HasConstraintName("FK__AuditLogs__Perfo__31B762FC");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("Domain.Models.Battery", b =>
                {
                    b.HasOne("Domain.Models.BatteryModel", "BatteryModel")
                        .WithMany("Batteries")
                        .HasForeignKey("BatteryModelId")
                        .IsRequired()
                        .HasConstraintName("FK__Batteries__Batte__59FA5E80");

                    b.Navigation("BatteryModel");
                });

            modelBuilder.Entity("Domain.Models.BatteryHealthLog", b =>
                {
                    b.HasOne("Domain.Models.Battery", "Battery")
                        .WithMany("BatteryHealthLogs")
                        .HasForeignKey("BatteryId")
                        .IsRequired()
                        .HasConstraintName("FK__BatteryHe__Batte__19DFD96B");

                    b.Navigation("Battery");
                });

            modelBuilder.Entity("Domain.Models.Driver", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("Domain.Models.Driver", "UserId")
                        .HasConstraintName("FK__Drivers__UserId__6C190EBB");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.InterStationTransfer", b =>
                {
                    b.HasOne("Domain.Models.User", "ApprovedByUser")
                        .WithMany("InterStationTransferApprovedByUsers")
                        .HasForeignKey("ApprovedByUserId")
                        .HasConstraintName("FK__InterStat__Appro__2180FB33");

                    b.HasOne("Domain.Models.Battery", "Battery")
                        .WithMany("InterStationTransfers")
                        .HasForeignKey("BatteryId")
                        .IsRequired()
                        .HasConstraintName("FK__InterStat__Batte__1F98B2C1");

                    b.HasOne("Domain.Models.Station", "FromStation")
                        .WithMany("InterStationTransferFromStations")
                        .HasForeignKey("FromStationId")
                        .IsRequired()
                        .HasConstraintName("FK__InterStat__FromS__1DB06A4F");

                    b.HasOne("Domain.Models.User", "RequestedByUser")
                        .WithMany("InterStationTransferRequestedByUsers")
                        .HasForeignKey("RequestedByUserId")
                        .HasConstraintName("FK__InterStat__Reque__208CD6FA");

                    b.HasOne("Domain.Models.Station", "ToStation")
                        .WithMany("InterStationTransferToStations")
                        .HasForeignKey("ToStationId")
                        .IsRequired()
                        .HasConstraintName("FK__InterStat__ToSta__1EA48E88");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Battery");

                    b.Navigation("FromStation");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.HasOne("Domain.Models.SwapTransaction", "SwapTransaction")
                        .WithMany("Payments")
                        .HasForeignKey("SwapTransactionId")
                        .HasConstraintName("FK__Payments__SwapTr__03F0984C");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Payments__UserId__04E4BC85");

                    b.Navigation("SwapTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.HasOne("Domain.Models.Station", "Station")
                        .WithMany("Ratings")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__Ratings__Station__2DE6D218");

                    b.HasOne("Domain.Models.SwapTransaction", "SwapTransaction")
                        .WithMany("Ratings")
                        .HasForeignKey("SwapTransactionId")
                        .HasConstraintName("FK__Ratings__SwapTra__2BFE89A6");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Ratings__UserId__2CF2ADDF");

                    b.Navigation("Station");

                    b.Navigation("SwapTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Reservation", b =>
                {
                    b.HasOne("Domain.Models.BatteryModel", "ReservedBatteryModel")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservedBatteryModelId")
                        .HasConstraintName("FK__Reservati__Reser__74AE54BC");

                    b.HasOne("Domain.Models.Station", "Station")
                        .WithMany("Reservations")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("FK__Reservati__Stati__71D1E811");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reservati__UserI__70DDC3D8");

                    b.HasOne("Domain.Models.Vehicle", "Vehicle")
                        .WithMany("Reservations")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK__Reservati__Vehic__72C60C4A");

                    b.Navigation("ReservedBatteryModel");

                    b.Navigation("Station");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Models.ReservationAllocation", b =>
                {
                    b.HasOne("Domain.Models.Battery", "Battery")
                        .WithMany("ReservationAllocations")
                        .HasForeignKey("BatteryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Reservation", "Reservation")
                        .WithMany("ReservationAllocations")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battery");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Models.StationInventory", b =>
                {
                    b.HasOne("Domain.Models.Battery", "Battery")
                        .WithMany("StationInventories")
                        .HasForeignKey("BatteryId")
                        .IsRequired()
                        .HasConstraintName("FK__StationIn__Batte__619B8048");

                    b.HasOne("Domain.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Models.Station", "Station")
                        .WithMany("StationInventories")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("FK__StationIn__Stati__60A75C0F");

                    b.Navigation("Battery");

                    b.Navigation("Reservation");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Models.StationStaff", b =>
                {
                    b.HasOne("Domain.Models.Station", "Station")
                        .WithMany("StationStaffs")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("FK__StationSt__Stati__151B244E");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("StationStaffs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__StationSt__UserI__160F4887");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Subscription", b =>
                {
                    b.HasOne("Domain.Models.SubscriptionPackage", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__Packa__0F624AF8");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Subscript__UserI__0E6E26BF");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.SupportTicket", b =>
                {
                    b.HasOne("Domain.Models.Station", "Station")
                        .WithMany("SupportTickets")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__SupportTi__Stati__2739D489");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SupportTi__UserI__2645B050");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.SwapTransaction", b =>
                {
                    b.HasOne("Domain.Models.User", "CustomerUser")
                        .WithMany("SwapTransactionCustomerUsers")
                        .HasForeignKey("CustomerUserId")
                        .HasConstraintName("FK__SwapTrans__Custo__7A672E12");

                    b.HasOne("Domain.Models.Battery", "IncomingBattery")
                        .WithMany("SwapTransactionIncomingBatteries")
                        .HasForeignKey("IncomingBatteryId")
                        .HasConstraintName("FK__SwapTrans__Incom__7D439ABD");

                    b.HasOne("Domain.Models.Battery", "OutgoingBattery")
                        .WithMany("SwapTransactionOutgoingBatteries")
                        .HasForeignKey("OutgoingBatteryId")
                        .HasConstraintName("FK__SwapTrans__Outgo__7C4F7684");

                    b.HasOne("Domain.Models.Reservation", "Reservation")
                        .WithMany("SwapTransactions")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("FK__SwapTrans__Reser__787EE5A0");

                    b.HasOne("Domain.Models.User", "StaffUser")
                        .WithMany("SwapTransactionStaffUsers")
                        .HasForeignKey("StaffUserId")
                        .HasConstraintName("FK__SwapTrans__Staff__7B5B524B");

                    b.HasOne("Domain.Models.Station", "Station")
                        .WithMany("SwapTransactions")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("FK__SwapTrans__Stati__797309D9");

                    b.Navigation("CustomerUser");

                    b.Navigation("IncomingBattery");

                    b.Navigation("OutgoingBattery");

                    b.Navigation("Reservation");

                    b.Navigation("StaffUser");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Models.Vehicle", b =>
                {
                    b.HasOne("Domain.Models.BatteryModel", "BatteryModelPreference")
                        .WithMany("Vehicles")
                        .HasForeignKey("BatteryModelPreferenceId")
                        .HasConstraintName("FK__Vehicles__Batter__6754599E");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Vehicles__UserId__66603565");

                    b.Navigation("BatteryModelPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Battery", b =>
                {
                    b.Navigation("BatteryHealthLogs");

                    b.Navigation("InterStationTransfers");

                    b.Navigation("ReservationAllocations");

                    b.Navigation("StationInventories");

                    b.Navigation("SwapTransactionIncomingBatteries");

                    b.Navigation("SwapTransactionOutgoingBatteries");
                });

            modelBuilder.Entity("Domain.Models.BatteryModel", b =>
                {
                    b.Navigation("Batteries");

                    b.Navigation("Reservations");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Models.Reservation", b =>
                {
                    b.Navigation("ReservationAllocations");

                    b.Navigation("SwapTransactions");
                });

            modelBuilder.Entity("Domain.Models.Station", b =>
                {
                    b.Navigation("InterStationTransferFromStations");

                    b.Navigation("InterStationTransferToStations");

                    b.Navigation("Ratings");

                    b.Navigation("Reservations");

                    b.Navigation("StationInventories");

                    b.Navigation("StationStaffs");

                    b.Navigation("SupportTickets");

                    b.Navigation("SwapTransactions");
                });

            modelBuilder.Entity("Domain.Models.SubscriptionPackage", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Models.SwapTransaction", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Driver");

                    b.Navigation("InterStationTransferApprovedByUsers");

                    b.Navigation("InterStationTransferRequestedByUsers");

                    b.Navigation("Payments");

                    b.Navigation("Ratings");

                    b.Navigation("Reservations");

                    b.Navigation("StationStaffs");

                    b.Navigation("Subscriptions");

                    b.Navigation("SupportTickets");

                    b.Navigation("SwapTransactionCustomerUsers");

                    b.Navigation("SwapTransactionStaffUsers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Models.Vehicle", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
