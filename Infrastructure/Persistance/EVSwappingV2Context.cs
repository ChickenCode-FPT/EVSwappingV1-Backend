// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace Domain.Models;

public partial class EVSwappingV2Context : IdentityDbContext<User>
{
    public EVSwappingV2Context()
    {
    }

    public EVSwappingV2Context(DbContextOptions<EVSwappingV2Context> options)
        : base(options)
    {
    }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<Battery> Batteries { get; set; }

    public virtual DbSet<BatteryHealthLog> BatteryHealthLogs { get; set; }

    public virtual DbSet<BatteryModel> BatteryModels { get; set; }

    public virtual DbSet<Driver> Drivers { get; set; }

    public virtual DbSet<InterStationTransfer> InterStationTransfers { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Reservation> Reservations { get; set; }

    public virtual DbSet<ReservationAllocation> ReservationAllocations { get; set; }

    public virtual DbSet<Station> Stations { get; set; }

    public virtual DbSet<StationInventory> StationInventories { get; set; }

    public virtual DbSet<StationStaff> StationStaffs { get; set; }

    public virtual DbSet<Subscription> Subscriptions { get; set; }

    public virtual DbSet<SubscriptionPackage> SubscriptionPackages { get; set; }

    public virtual DbSet<SupportTicket> SupportTickets { get; set; }

    public virtual DbSet<SwapTransaction> SwapTransactions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AuditLog>(entity =>
        {
            base.OnModelCreating(modelBuilder);
            entity.HasKey(e => e.AuditId).HasName("PK__AuditLog__A17F23988DAB68B3");

            entity.Property(e => e.Action).HasMaxLength(50);
            entity.Property(e => e.KeyValues).HasMaxLength(1000);
            entity.Property(e => e.PerformedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.TableName).HasMaxLength(200);

            entity.HasOne(d => d.PerformedByUser).WithMany(p => p.AuditLogs)
                .HasForeignKey(d => d.PerformedByUserId)
                .HasConstraintName("FK__AuditLogs__Perfo__31B762FC");
        });

        modelBuilder.Entity<Battery>(entity =>
        {
            entity.HasKey(e => e.BatteryId).HasName("PK__Batterie__5710805E39AB72DF");

            entity.HasIndex(e => e.SerialNumber, "UQ__Batterie__048A00086C7A125E").IsUnique();

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.CurrentSoH).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CycleCount).HasDefaultValue(0);
            entity.Property(e => e.SerialNumber)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Available");

            entity.HasOne(d => d.BatteryModel).WithMany(p => p.Batteries)
                .HasForeignKey(d => d.BatteryModelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Batteries__Batte__59FA5E80");
        });

        modelBuilder.Entity<BatteryHealthLog>(entity =>
        {
            entity.HasKey(e => e.BatteryHealthLogId).HasName("PK__BatteryH__C86102E2F99AEE46");

            entity.Property(e => e.Notes).HasMaxLength(1000);
            entity.Property(e => e.RecordedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SoH).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Temperature).HasColumnType("decimal(6, 2)");

            entity.HasOne(d => d.Battery).WithMany(p => p.BatteryHealthLogs)
                .HasForeignKey(d => d.BatteryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BatteryHe__Batte__19DFD96B");
        });

        modelBuilder.Entity<BatteryModel>(entity =>
        {
            entity.HasKey(e => e.BatteryModelId).HasName("PK__BatteryM__831184E1EF9DA614");

            entity.HasIndex(e => e.ModelCode, "UQ__BatteryM__514DC4D4A9ECFCB1").IsUnique();

            entity.Property(e => e.CapacityKwh)
                .HasColumnType("decimal(8, 3)")
                .HasColumnName("CapacityKWh");
            entity.Property(e => e.Chemistry).HasMaxLength(50);
            entity.Property(e => e.CompatibleVehicleTypes).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Manufacturer).HasMaxLength(200);
            entity.Property(e => e.ModelCode)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Driver>(entity =>
        {
            entity.HasKey(e => e.DriverId).HasName("PK__Drivers__F1B1CD044D05801A");

            entity.HasIndex(e => e.UserId, "UQ__Drivers__1788CC4D82BCB27F").IsUnique();

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.PreferredPaymentMethod).HasMaxLength(100);
            entity.Property(e => e.TotalSwaps).HasDefaultValue(0);

            entity.HasOne(d => d.User).WithOne(p => p.Driver)
                .HasForeignKey<Driver>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Drivers__UserId__6C190EBB");
        });

        modelBuilder.Entity<InterStationTransfer>(entity =>
        {
            entity.HasKey(e => e.TransferId).HasName("PK__InterSta__954900917002AFE9");

            entity.Property(e => e.RequestedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Requested");

            entity.HasOne(d => d.ApprovedByUser).WithMany(p => p.InterStationTransferApprovedByUsers)
                .HasForeignKey(d => d.ApprovedByUserId)
                .HasConstraintName("FK__InterStat__Appro__2180FB33");

            entity.HasOne(d => d.Battery).WithMany(p => p.InterStationTransfers)
                .HasForeignKey(d => d.BatteryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__InterStat__Batte__1F98B2C1");

            entity.HasOne(d => d.FromStation).WithMany(p => p.InterStationTransferFromStations)
                .HasForeignKey(d => d.FromStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__InterStat__FromS__1DB06A4F");

            entity.HasOne(d => d.RequestedByUser).WithMany(p => p.InterStationTransferRequestedByUsers)
                .HasForeignKey(d => d.RequestedByUserId)
                .HasConstraintName("FK__InterStat__Reque__208CD6FA");

            entity.HasOne(d => d.ToStation).WithMany(p => p.InterStationTransferToStations)
                .HasForeignKey(d => d.ToStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__InterStat__ToSta__1EA48E88");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A38B7824D61");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValue("VND");
            entity.Property(e => e.Method).HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Paid");
            entity.Property(e => e.TransactionRef).HasMaxLength(200);

            entity.HasOne(d => d.SwapTransaction).WithMany(p => p.Payments)
                .HasForeignKey(d => d.SwapTransactionId)
                .HasConstraintName("FK__Payments__SwapTr__03F0984C");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payments__UserId__04E4BC85");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__Ratings__FCCDF87C7367E509");

            entity.Property(e => e.Comment).HasMaxLength(1000);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Station).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__Ratings__Station__2DE6D218");

            entity.HasOne(d => d.SwapTransaction).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.SwapTransactionId)
                .HasConstraintName("FK__Ratings__SwapTra__2BFE89A6");

            entity.HasOne(d => d.User).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Ratings__UserId__2CF2ADDF");
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.HasKey(e => e.ReservationId).HasName("PK__Reservat__B7EE5F2409167646");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(sysutcdatetime())"); 

            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Pending");

            entity.HasOne(d => d.ReservedBatteryModel).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.ReservedBatteryModelId)
                .HasConstraintName("FK__Reservati__Reser__74AE54BC");

            entity.HasOne(d => d.Station).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.StationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Reservati__Stati__71D1E811");

            entity.HasOne(d => d.User).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Reservati__UserI__70DDC3D8");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK__Reservati__Vehic__72C60C4A");
        });

        modelBuilder.Entity<Station>(entity =>
        {
            entity.HasKey(e => e.StationId).HasName("PK__Stations__E0D8A6BD1C2C1478");

            entity.HasIndex(e => e.Code, "UQ__Stations__A25C5AA7BA9935BE").IsUnique();

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Latitude).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue((byte)1);
        });

        modelBuilder.Entity<StationInventory>(entity =>
        {
            entity.HasKey(e => e.StationInventoryId).HasName("PK__StationI__92D37BC1DE21EA05");

            entity.ToTable("StationInventory");

            entity.HasIndex(e => new { e.StationId, e.BatteryId }, "UQ__StationI__15A9AEB95AF9C628").IsUnique();

            entity.Property(e => e.SlotNumber).HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Available");

            entity.HasOne(d => d.Battery).WithMany(p => p.StationInventories)
                .HasForeignKey(d => d.BatteryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StationIn__Batte__619B8048");

            entity.HasOne(d => d.Station).WithMany(p => p.StationInventories)
                .HasForeignKey(d => d.StationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StationIn__Stati__60A75C0F");

            entity.HasOne(e => e.Reservation)
                .WithMany()
                .HasForeignKey(e => e.ReservationId)
                .OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<ReservationAllocation>(entity =>
        {
            entity.ToTable("ReservationAllocations"); 
            entity.HasKey(e => e.ReservationAllocationId);

            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(e => e.Reservation)
                .WithMany(r => r.ReservationAllocations)
                .HasForeignKey(e => e.ReservationId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(e => e.Battery)
                .WithMany(b => b.ReservationAllocations)
                .HasForeignKey(e => e.BatteryId)
                .OnDelete(DeleteBehavior.Restrict);

            entity.HasIndex(e => new { e.BatteryId, e.Status });
        });

        modelBuilder.Entity<StationStaff>(entity =>
        {
            entity.HasKey(e => e.StationStaffId).HasName("PK__StationS__0F02AC55E210EA79");

            entity.HasIndex(e => new { e.StationId, e.UserId }, "UQ__StationS__31A02A78D13251A8").IsUnique();

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Station).WithMany(p => p.StationStaffs)
                .HasForeignKey(d => d.StationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StationSt__Stati__151B244E");

            entity.HasOne(d => d.User).WithMany(p => p.StationStaffs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StationSt__UserI__160F4887");
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.SubscriptionId).HasName("PK__Subscrip__9A2B249D1E0200C9");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Active");

            entity.HasOne(d => d.Package).WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Subscript__Packa__0F624AF8");

            entity.HasOne(d => d.User).WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Subscript__UserI__0E6E26BF");
        });

        modelBuilder.Entity<SubscriptionPackage>(entity =>
        {
            entity.HasKey(e => e.PackageId).HasName("PK__Subscrip__322035CCB3B0D72F");

            entity.Property(e => e.BillingCycle)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<SupportTicket>(entity =>
        {
            entity.HasKey(e => e.TicketId).HasName("PK__SupportT__712CC6075DE7689D");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Open");
            entity.Property(e => e.Subject).HasMaxLength(300);

            entity.HasOne(d => d.Station).WithMany(p => p.SupportTickets)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__SupportTi__Stati__2739D489");

            entity.HasOne(d => d.User).WithMany(p => p.SupportTickets)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SupportTi__UserI__2645B050");
        });

        modelBuilder.Entity<SwapTransaction>(entity =>
        {
            entity.HasKey(e => e.SwapTransactionId).HasName("PK__SwapTran__F6083D6BDCC4B582");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Notes).HasMaxLength(1000);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SwapStartedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SwapStatus)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Completed");

            entity.HasOne(d => d.CustomerUser).WithMany(p => p.SwapTransactionCustomerUsers)
                .HasForeignKey(d => d.CustomerUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SwapTrans__Custo__7A672E12");

            entity.HasOne(d => d.IncomingBattery).WithMany(p => p.SwapTransactionIncomingBatteries)
                .HasForeignKey(d => d.IncomingBatteryId)
                .HasConstraintName("FK__SwapTrans__Incom__7D439ABD");

            entity.HasOne(d => d.OutgoingBattery).WithMany(p => p.SwapTransactionOutgoingBatteries)
                .HasForeignKey(d => d.OutgoingBatteryId)
                .HasConstraintName("FK__SwapTrans__Outgo__7C4F7684");

            entity.HasOne(d => d.Reservation).WithMany(p => p.SwapTransactions)
                .HasForeignKey(d => d.ReservationId)
                .HasConstraintName("FK__SwapTrans__Reser__787EE5A0");

            entity.HasOne(d => d.StaffUser).WithMany(p => p.SwapTransactionStaffUsers)
                .HasForeignKey(d => d.StaffUserId)
                .HasConstraintName("FK__SwapTrans__Staff__7B5B524B");

            entity.HasOne(d => d.Station).WithMany(p => p.SwapTransactions)
                .HasForeignKey(d => d.StationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SwapTrans__Stati__797309D9");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__Vehicles__476B5492A1D3C6E1");

            entity.HasIndex(e => e.Vin, "UQ__Vehicles__C5DF234C35BD0AC7").IsUnique();

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Make).HasMaxLength(100);
            entity.Property(e => e.Model).HasMaxLength(100);
            entity.Property(e => e.Vin)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("VIN");

            entity.HasOne(d => d.BatteryModelPreference).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.BatteryModelPreferenceId)
                .HasConstraintName("FK__Vehicles__Batter__6754599E");

            entity.HasOne(d => d.User).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Vehicles__UserId__66603565");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}